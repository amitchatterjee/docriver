load_module /root/debuild/nginx-1.15.5/debian/debuild-module-lua/nginx-1.15.5/debian/nginx-module-lua/usr/lib/nginx/modules/ngx_http_lua_module.so;

events {
  worker_connections 60;
}

env DOCRIVER_OIDC_REDIRECT_URL;
env DOCRIVER_OIDC_POST_LOGOUT_REDIRECT_URL;
env DOCRIVER_OIDC_DISCOVERY_URL;
env DOCRIVER_OIDC_CLIENTID;
env DOCRIVER_OIDC_SECRET;
env DOCRIVER_AUTH_URL;

http {
    lua_package_path '~/lua/?.lua;;';

    error_log /dev/stdout info;

    log_format main '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent"';

    access_log /dev/stdout  main;

    resolver 8.8.8.8;
    # This is the docker environment DNS server
    # resolver 127.0.0.11 valid=1s;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 5;

    # cache for discovery metadata documents
    lua_shared_dict discovery 1m;
    # cache for JWKs
    lua_shared_dict jwks 1m;

    # NB: if you have "lua_code_cache off;", use:
    # set $session_secret xxxxxxxxxxxxxxxxxxx;
    # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off

    server {
        # listen       80;
        # listen  [::]:80;
        listen 443 ssl;
        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;

        server_name  localhost;

        # Basic authenitcation example
        # location / {
        #     root   /usr/share/nginx/html;
        #     index  index.html index.htm;
        #     autoindex on;
        #     charset utf-8;
        #
        #     auth_basic "Restricted Content";
        #     auth_basic_user_file /etc/nginx/htpasswd;
        # }

        location /token {
            proxy_pass_header Host;
            proxy_pass_header Authorization;
            proxy_pass https://docriver-token:5001;
        }

        location / {
            # Based on - https://github.com/tom-smith-okta/nginx-oss-okta/blob/master/readme.md
            access_by_lua_block {
                local opts = {
                    redirect_uri = require("os").getenv("DOCRIVER_OIDC_REDIRECT_URL") or "https://localhost/redirect",
                    discovery = require("os").getenv("DOCRIVER_OIDC_DISCOVERY_URL") or "https://dev-XXXXX.okta.com/oauth2/default/.well-known/openid-configuration",
                    client_id = require("os").getenv("DOCRIVER_OIDC_CLIENTID") or "XXXXXXX",
                    client_secret = require("os").getenv("DOCRIVER_OIDC_SECRET") or "YYYYYYY",
                    scope = "openid email profile",

                    logout_path = "/logout",
                    -- redirect_after_logout_with_id_token_hint = false,
                    -- redirect_after_logout_uri = "/",
                    post_logout_redirect_uri = require("os").getenv("DOCRIVER_OIDC_POST_LOGOUT_REDIRECT_URL") or "https://localhost",

                    token_endpoint_auth_method = "client_secret_post",
                    ssl_verify = "no",

                    accept_none_alg = true,
                    auth_accept_token_as = "header"
                }

                -- call authenticate for OpenID Connect user authentication
                local res, err = require("resty.openidc").authenticate(opts)

                if err then
                    ngx.status = 500
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                ngx.req.set_header("X-user", res.id_token.sub)
                ngx.req.set_header("X-email", res.id_token.email)
                ngx.req.set_header("X-name", res.id_token.name)
                ngx.req.set_header("X-preferred_username", res.id_token.preferred_username)
                ngx.req.set_header('X-authorization', "Bearer "..string.match(res.access_token, "^([%S]+)"))
        
                ngx.log(ngx.INFO, "User signed in successfully: "..res.id_token.name.."/"..res.id_token.email)
                ngx.log(ngx.INFO, "Access token for the authorized user: "..res.access_token)
                -- ngx.log(ngx.INFO, "preferred_username of authorized user: "..res.id_token.preferred_username)

                if type(ngx.header["Set-Cookie"]) == "table" then
                    ngx.header["Set-Cookie"] = { "auth="..ngx.req.get_headers()['X-authorization'].."; Path=/; SameSite=None; Secure;", unpack(ngx.header["Set-Cookie"]) }
                else
                   ngx.header["Set-Cookie"] = { "auth="..ngx.req.get_headers()['X-authorization'].."; Path=/; SameSite=None; Secure;", ngx.header["Set-Cookie"] }
                end
            }

            add_header x-auth-sub $http_x_user;
            add_header x-auth-email $http_x_email;
            add_header x-auth-name $http_x_name;
            add_header x-auth-preferred-username $http_x_preferred_username;
            add_header x-auth-token $http_x_authorization;

            default_type text/html;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            autoindex on;
            charset utf-8;
        }
    }
}
